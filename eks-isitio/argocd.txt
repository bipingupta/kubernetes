##################### Pre-requisite ##################### 
## AWS CLI

## Chocolatey links (installer - for argocd cli deployment)
https://chocolatey.org/install
## choco install chocolateygui
## choco install kubernetes-cli	// kubectl install
## choco install aws-iam-authenticator
## choco install awscli         // aws
## choco install eksctl
## choco install argocd-cli
## choco install kubernetes-helm

###################################
########## EKSCTL ############
###################################
choco install -y --force eksctl
eksctl version

################################### RESET KUBECONFIG  ###################################
aws configure 

aws eks update-kubeconfig --name ekscrossplane --region ap-south-1

###########################################################################################

BASIC COMMANDS
Step-01: Create EKS Cluster using eksctl
eksctl create cluster --name ekscrossplane --region us-west-2 --zones=us-west-2a,us-west-2b,us-west-2c --without-nodegroup 

Step-02: Create & Associate IAM OIDC Provider for our EKS Cluster
eksctl utils associate-iam-oidc-provider --region us-west-2 --cluster ekscrossplane --approve

Step-03: Create EC2 Keypair

Step-04: Create Public Node Group with additional Add-Ons in Public Subnets
eksctl create nodegroup --cluster=ekscrossplane --region=us-west-2 --name=ekscrossplane-ng-public1 --node-type=t3.medium --nodes=2 --nodes-min=2 --nodes-max=4 --node-volume-size=20 --ssh-access --ssh-public-key=eks-crossplane-demo --managed --asg-access --external-dns-access --full-ecr-access --appmesh-access --alb-ingress-access 

Step-05: Delete a node group (This will cordon the node & drain pod to others)
eksctl delete nodegroup --cluster=ekscrossplane --name=ekscrossplane-ng-public1

Step-06: Delete cluster
eksctl delete cluster --name ekscrossplane

# List all cluster
eksctl get cluster
# List all nodegroup in the cluster
eksctl get nodegroup --cluster ekscrossplane
# Scale nodes in a nodegroup
eksctl scale nodegroup --cluster=ekscrossplane --nodes=4 --name=ekscrossplane-ng-public1

kubectl get nodes -o wide
kubectl config view --minify
kubectl cluster-info
kubectl config get-contexts -o name
kubectl port-forward svc/nginx  -n default 8081:80

############################################ ArgoCD Server installtion on kubernetes ###################################
## Installing Argo CD on Your Cluster
1.Check if kubectl is working as expected
  kubectl get nodes
  
2.Create namespace
  kubectl create namespace argocd
  
3.Run the Argo CD install script provided by the project maintainers.
  kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
  
4. Check the status of your Kubernetes pods
  kubectl get pods -n argocd

5.1.2 ## Access ArgoCD using NodePort (Change ClusterIP to NodePort)
  kubectl get pods -n argocd
  kubectl -n argocd edit svc argocd-server
  change almost last line ==>> ClusterIP -> NodePort

  forward those to arbitrarily chosen other ports, like 8080, like so:
  kubectl port-forward svc/argocd-server -n argocd 8080:443
 

## Forwarding Ports to Access Argo CD
5.1.2 Retrieve the admin password which was automatically generated during your installation and decode from base64 from online.
    kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}"
    kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

    Decode the password from online (https://www.base64decode.org/)

  Decoded Password => OysLzLEg1k4d4D9T
  
  http://localhost:8080 
  user id :  admin
  password : OysLzLEg1k4d4D9T
  
5.1.3 ## Access ArgoCD using LoadBalancer (Change ClusterIP/NodePort to LoadBalancer)
	kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
	OR
	kubectl -n argocd edit svc argocd-server
	change almost last line ==>> ClusterIP/NodePort -> LoadBalancer
	export ARGOCD_SERVER=`kubectl get svc argocd-server -n argocd -o json | jq --raw-output '.status.loadBalancer.ingress[0].hostname'`
	echo $ARGOCD_SERVER
	export ARGO_PWD=`kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d`
	echo $ARGO_PWD
	argocd login $ARGOCD_SERVER --username admin --password $ARGO_PWD --insecure

http://a8e7557bd3b1543d8b7395b2697c4f28-1872420323.us-west-2.elb.amazonaws.com
user id :  admin
password : XJkiiz6pTd-hfJAW	  


## Working with Argo CD from the Command Line
6. Use chocolatey utility to install in Windows ( with admin access)
   choco install argocd-cli

7. Deploying helm-guestbook on ArgoCD
  argocd app create helm-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path helm-guestbook --dest-server   https://kubernetes.default.svc --dest-namespace default
  kubectl port-forward svc/helm-guestbook 9090:80
  http://localhost:9090

########### INSTALLING CROSSPLASE USING HELM ########### 
kubectl create namespace crossplane-system
helm repo add crossplane-stable https://charts.crossplane.io/stable
helm repo update
helm install crossplane --namespace crossplane-system crossplane-stable/crossplane
kubectl -n crossplane-system get all
kubectl -n crossplane-system get pods

########### INSTALLING CROSSPLASE-CLI ########### 
curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh

------------ Install Configuration Package on Default VPC ------------
kubectl crossplane install provider crossplane/provider-aws:v0.27.0
kubectl -n crossplane-system get deployment.apps
watch kubectl get pkg
kubectl get crds
kubectl get provider

------------ Get AWS Account Keyfile ------------
AWS_PROFILE=default && echo -e "[default]\naws_access_key_id = $(aws configure get aws_access_key_id --profile $AWS_PROFILE)\naws_secret_access_key = $(aws configure get aws_secret_access_key --profile $AWS_PROFILE)" > creds.conf
------------ Create a Provider Secret ------------
kubectl create secret generic aws-creds -n crossplane-system --from-file=creds=./creds.conf
------------ Configure the AWS Provider ------------
kubectl create -f providerconfig.yaml

We will create the following ProviderConfig object to configure credentials for AWS Provider:

apiVersion: aws.crossplane.io/v1beta1
kind: ProviderConfig
metadata:
  name: default
spec:
  credentials:
    source: Secret
    secretRef:
      namespace: crossplane-system
      name: aws-creds
      key: creds

kubectl apply -f https://raw.githubusercontent.com/crossplane/crossplane/release-1.5/docs/snippets/configure/aws/providerconfig.yaml

################################### INFRA PROVISIONING usign CROSSPLANE SAMPLE ###################################



################################### ARGO REPO LIST  ###################################
helm repo add stable https://charts.helm.sh/stable --force-update
HELM CHARTS  (Update & Search in HELM charts repo)            ->   https://charts.helm.sh/stable
HELM APP (tick Recursive option, Folder name ex: guestbook)   ->   https://github.com/argoproj/argocd-example-apps.git 
https://github.com/justmeandopensource/argocd-demo


kubectl get all -n crossplane-system


------------ DEBUGGING AWS Infrasture ------------
kubectl describe -n crossplane-system rdsinstances.database.aws.crossplane.io my-db 
kubectl describe -n crossplane-system  my-db

################################### KUBERNETES-DASHBOARD  ###################################
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.4.0/aio/deploy/recommended.yaml
kubectl apply -f eks-admin-service-account.yaml
kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep eks-admin | awk '{print $1}')
kubectl proxy
http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#!/login

################################### RESET KUBECONFIG  ###################################
aws eks update-kubeconfig --name eksdemo1 --region ap-south-1

################################ SET NAMESPACE CONTEXT  ################################
kubectl config set-context --current --namespace=crossplane-system

########### CONVERT TERRAFORM to CROSSPLASE PROVIDER ############
Terrajet - Generate Crossplane Providers from any Terraform Provide
https://github.com/crossplane/terrajet
https://github.com/crossplane-contrib/provider-jet-aws






















