---
services:


  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    restart: "no"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVERS: "zookeeper:22888:23888"
    ports:
     - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka
    restart: "no"
    ports:
      - "9092:9092"
    #  - "2181:2181"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
    # Exposes 29092 for external connections to the broker
    # Use kafka1:9092 for connections internal on the docker network
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_SCHEMA_REGISTRY_URL: "schemaregistry:8085"
      #KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_JMX_PORT: 9991

  schemaregistry:
    image: confluentinc/cp-schema-registry:6.2.0
    container_name: schemaregistry
    restart: "always"
    ports:
      - 8085:8085
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
   
  connect:
    image: cnfldemos/cp-server-connect-datagen:0.5.0-6.2.0
    hostname: connect
    container_name: connect
    depends_on:
      - kafka
      - schemaregistry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schemaregistry:8085
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.2.0
    container_name: control-center
    depends_on:
      - kafka
      - schemaregistry
      - ksql-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka:29092"
      CONTROL_CENTER_CONNECT_CONNECT_CLUSTER: "connect:8083"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schemaregistry:8085"
      CONTROL_CENTER_KSQL_KSQLDB_URL: "http://ksqldb:8088"
      # The advertised URL needs to be the URL on which the browser
      #  can access the KSQL server (e.g. http://localhost:8088/info)
      CONTROL_CENTER_KSQL_KSQLDB_ADVERTISED_URL: "http://localhost:8088"
      # -v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v
      # Useful settings for development/laptop use - modify as needed for Prod
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 104857600
    command:
      - bash
      - -c 
      - |
        echo "Waiting two minutes for Kafka brokers to start and 
               necessary topics to be available"
        sleep 120  
        /etc/confluent/docker/run
        
  # ksql-cli:
    # image: confluentinc/cp-ksql-cli
    # container_name: ksql-cli
    # depends_on:
      # - ksql-server
    # entrypoint: /bin/sh
    # tty: true

  ksql-server:
    image: confluentinc/cp-ksql-server
    container_name: ksql-server
    ports:
      - 8088:8088
    depends_on:
      - schemaregistry
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_KSQL_SERVICE_ID: kafka_workshop
      KSQL_BOOTSTRAP_SERVERS: "kafka:29092"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schemaregistry:8085"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
      KSQL_KSQL_HIDDEN_TOPICS: '^_.*'
      # KSQL_CUB_KAFKA_TIMEOUT: 300
      # KSQL_KSQL_COMMIT_INTERVAL_MS: 2000
      # KSQL_KSQL_CACHE_MAX_BYTES_BUFFERING: 10000000
      # KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: earliest


  # ksqldb:
    # # *-----------------------------*
    # # To connect to ksqlDB CLI
    # #   docker exec --interactive --tty ksqldb ksql http://localhost:8088
    # # *-----------------------------*ksqldb-server:0.21.0
    # image: confluentinc/ksqldb-server
    # container_name: ksqldb
    # depends_on:
      # - kafka
      # - schemaregistry
    # ports:
      # - "8088:8088"
    # environment:
      # KSQL_LISTENERS: http://0.0.0.0:8088
      # KSQL_BOOTSTRAP_SERVERS: broker:29092
      # KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      # KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      # KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schemaregistry:8085
      # KSQL_STREAMS_PRODUCER_MAX_BLOCK_MS: 9223372036854775807
      # KSQL_KSQL_CONNECT_URL: http://connect:8083
      # KSQL_KSQL_SERVICE_ID: confluent_rmoff_01
      # KSQL_KSQL_HIDDEN_TOPICS: '^_.*'

# Other systems
  mysql:
    # *-----------------------------*
    # To connect to the DB:
    #   docker exec -it mysql bash -c 'mysql -u root -p$MYSQL_ROOT_PASSWORD demo'
    # *-----------------------------*
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
     - MYSQL_ROOT_PASSWORD=debezium
     - MYSQL_USER=mysqluser
     - MYSQL_PASSWORD=mysqlpw
    # volumes:
     # - ${PWD}/data/mysql:/docker-entrypoint-initdb.d
     # - ${PWD}/data:/data

  # neo4j:
    # image: neo4j:4.2.3
    # container_name: neo4j
    # ports:
    # - "7474:7474"
    # - "7687:7687"
    # environment:
      # NEO4J_AUTH: neo4j/connect
      # NEO4J_dbms_memory_heap_max__size: 8G
      # NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'

  # kafkacat:
    # image: edenhill/kafkacat:1.6.0
    # container_name: kafkacat
    # entrypoint: 
      # - /bin/sh 
      # - -c 
      # - |
        # apk add jq; 
        # while [ 1 -eq 1 ];do sleep 60;done

  # elasticsearch:
    # image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    # container_name: elasticsearch
    # hostname: elasticsearch
    # ports:
      # - 9200:9200
    # environment:
      # xpack.security.enabled: "false"
      # ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      # discovery.type: "single-node"

  # kibana:
    # image: docker.elastic.co/kibana/kibana:7.10.1
    # container_name: kibana
    # hostname: kibana
    # depends_on:
      # - elasticsearch
    # ports:
      # - 5601:5601
    # environment:
      # xpack.security.enabled: "false"
      # discovery.type: "single-node"
    # command:
      # - bash
      # - -c
      # - |
        # /usr/local/bin/kibana-docker &
        # echo "Waiting for Kibana to be ready ⏳"
        # while [ $$(curl -H 'kbn-xsrf: true' -s -o /dev/null -w %{http_code} http://localhost:5601/api/saved_objects/_find?type=index-pattern&search_fields=title&search=*) -ne 200 ] ; do 
          # echo -e "\t" $$(date) " Kibana saved objects request response: " $$(curl -H 'kbn-xsrf: true' -o /dev/null -w %{http_code} -s http://localhost:5601/api/saved_objects/_find?type=index-pattern&search_fields=title&search=*) $$(curl -H 'kbn-xsrf: true' -s http://localhost:5601/api/saved_objects/_find?type=index-pattern&search_fields=title&search=*) " (waiting for 200)"
          # sleep 5  
        # done

        # echo -e "\t" $$(date) " Kibana saved objects request response: " $$(curl -H 'kbn-xsrf: true' -o /dev/null -w %{http_code} -s http://localhost:5601/api/saved_objects/_find?type=index-pattern&search_fields=title&search=*) $$(curl -H 'kbn-xsrf: true' -s http://localhost:5601/api/saved_objects/_find?type=index-pattern&search_fields=title&search=*)

        # echo -e "\n--\n+> Pre-creating index pattern"
        # curl -s -XPOST 'http://localhost:5601/api/saved_objects/index-pattern/mysql-debezium-asgard.demo.orders' \
          # -H 'kbn-xsrf: nevergonnagiveyouup' \
          # -H 'Content-Type: application/json' \
          # -d '{"attributes":{"title":"mysql-debezium-asgard.demo.orders","timeFieldName":"CREATE_TS"}}'

        # echo -e "\n--\n+> Setting the index pattern as default"
        # curl -s -XPOST 'http://localhost:5601/api/kibana/settings' \
          # -H 'kbn-xsrf: nevergonnagiveyouup' \
          # -H 'content-type: application/json' \
          # -d '{"changes":{"defaultIndex":"mysql-debezium-asgard.demo.orders"}}'

        # echo -e "\n--\n+> Opt out of Kibana telemetry"
        # curl 'http://localhost:5601/api/telemetry/v2/optIn' \
            # -H 'kbn-xsrf: nevergonnagiveyouup' \
            # -H 'content-type: application/json' \
            # -H 'accept: application/json' \
            # --data-binary '{"enabled":false}' \
            # --compressed

        # sleep infinity


