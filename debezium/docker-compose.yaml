---
services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    restart: "no"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVERS: "zookeeper:22888:23888"
    ports:
     - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka
    restart: "no"
    ports:
      - "9092:9092"
    #  - "2181:2181"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
    # Exposes 29092 for external connections to the broker
    # Use kafka1:9092 for connections internal on the docker network
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_SCHEMA_REGISTRY_URL: "schemaregistry:8085"
      #KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_JMX_PORT: 9991

  schemaregistry:
    image: confluentinc/cp-schema-registry:6.2.0
    container_name: schemaregistry
    restart: "always"
    ports:
      - 8085:8085
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      
  # restproxy:
    # image: confluentinc/cp-kafka-rest:7.4.4
    # container_name: restproxy
    # restart: "always"
    # depends_on:
      # - kafka
      # - schemaregistry
    # environment:
      # KAFKA_REST_BOOTSTRAP_SERVERS: "kafka:29092"
      # KAFKA_REST_ZOOKEEPER_CONNECT: "zookeeper:2181"
      # KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      # KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schemaregistry:8085"
      # KAFKA_REST_HOST_NAME: restproxy
      # KAFKA_REST_DEBUG: "true"
    # ports:
      # - 8082:8082

  connect:
    image: cnfldemos/cp-server-connect-datagen:0.5.0-6.2.0
    hostname: connect
    container_name: connect
    depends_on:
      - kafka
      - schemaregistry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8085
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      
  ksql-cli:
    image: confluentinc/cp-ksql-cli
    container_name: ksql-cli
    depends_on:
      - ksql-server
    entrypoint: /bin/sh
    tty: true

  ksql-server:
    image: confluentinc/cp-ksql-server
    container_name: ksql-server
    ports:
      - 8088:8088
    depends_on:
      - schemaregistry
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_KSQL_SERVICE_ID: kafka_workshop
      KSQL_BOOTSTRAP_SERVERS: "kafka:29092"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schemaregistry:8085"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
      KSQL_KSQL_HIDDEN_TOPICS: '^_.*'
      # KSQL_CUB_KAFKA_TIMEOUT: 300
      # KSQL_KSQL_COMMIT_INTERVAL_MS: 2000
      # KSQL_KSQL_CACHE_MAX_BYTES_BUFFERING: 10000000
      # KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: earliest
 
  kowl:
    image: quay.io/cloudhut/kowl:master
    container_name: kowl
    restart: "always"
    ports:
    - "8080:8080"
#   environment:
#     KAFKA_BROKERS: "kafka:29092"
    volumes:
      - ./config.yaml:/etc/kowl/config.yaml
    entrypoint: ./kowl --config.filepath=/etc/kowl/config.yaml
    depends_on:
      - kafka
      - schemaregistry

  owl-shop:
    image: quay.io/cloudhut/owl-shop:latest
    container_name: owl-shop
    restart: "no"
    environment:
      # - SHOP_KAFKA_BROKERS=localhost:9092
      - SHOP_KAFKA_BROKERS=kafka:29092
      - SHOP_KAFKA_TOPICREPLICATIONFACTOR=1
      - SHOP_TRAFFIC_INTERVAL_RATE=1
      - SHOP_TRAFFIC_INTERVAL_DURATION=0.1s
    depends_on:
      - kafka
      - kowl

  debezium:
    image: debezium/connect:1.9
    container_name: debezium
    hostname: debezium
    depends_on:
      - kowl
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: 'kafka:29092'
      GROUP_ID: dbz-group
      REST_ADVERTISED_HOST_NAME: debezium
      CONFIG_STORAGE_TOPIC: dbz-connect-configs
      OFFSET_STORAGE_TOPIC: dbz-connect-offsets
      STATUS_STORAGE_TOPIC: dbz-connect-status
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: 'true'
 

  debezium-ui:
    image: debezium/debezium-ui:latest
    restart: always
    container_name: debezium-ui
    hostname: debezium-ui
    depends_on:
      debezium:
        condition: service_healthy
    ports:
      - '8080:8080'
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083
  
  postgres:
    image: debezium/postgres
    restart: always
    container_name: postgres
    hostname: postgres
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: movies_db
    volumes:
      - ./scripts:/docker-entrypoint-initdb.d
